name: AA-Auto

# 触发方式：手动触发和北京时间周五0点（UTC时间周四16点）
on:
  workflow_dispatch:
    inputs:
      os_version:
        description: '选择操作系统版本'
        required: true
        default: 'ubuntu-22.04'
        type: choice
        options:
          - ubuntu-22.04
          - ubuntu-24.04
      start_stage:
        description: '选择开始编译的阶段'
        required: true
        default: 'full'  # 默认为完整编译
        type: choice
        options:
          - full           # 完整编译（从工具链开始）
          - toolchain      # 工具链编译
          - packages       # 依赖包编译
          - kernel         # 内核编译
          - base           # 基础系统编译
          - ipk            # 软件包编译（包括IPK/APK）
  schedule:
    - cron: '0 16 * * 4'  # 北京时间周五0点（UTC时间是周四16点）

# 环境变量设置
env:
  TZ: Asia/Shanghai  # 设置时区为亚洲/上海
  # 芯片类型，当前为ipq60xx，未来可扩展其他芯片
  CHIP_TYPE: ipq60xx
  # 芯片基础配置文件路径
  CHIP_BASE_FILE: configs/ipq60xx_base.config
  # 未来可能支持的芯片类型（注释掉，预留参数化支持）
  # FUTURE_CHIP_TYPES: ipq80xx, mtk

jobs:
  # 准备阶段：生成编译矩阵
  prepare:
    name: 准备编译矩阵
    runs-on: ubuntu-22.04
    outputs:
      matrix-ultra: ${{ steps.set-matrix.outputs.matrix-ultra }}
      matrix-others: ${{ steps.set-matrix.outputs.matrix-others }}
    steps:
      - name: 检出代码
        uses: actions/checkout@main
        
      - name: 生成编译矩阵
        id: set-matrix
        run: |
          # 构建Ultra配置的矩阵
          MATRIX_ULTRA='{"include":['
          MATRIX_ULTRA+='{"branch_name":"immwrt","branch_url":"https://github.com/laipeng668/immortalwrt.git","branch_ref":"master","branch_config":"configs/immwrt_base.config","pkg_name":"Ultra","pkg_config":"configs/Ultra.config"},'
          MATRIX_ULTRA+='{"branch_name":"openwrt","branch_url":"https://github.com/laipeng668/openwrt.git","branch_ref":"master","branch_config":"configs/openwrt_base.config","pkg_name":"Ultra","pkg_config":"configs/Ultra.config"},'
          MATRIX_ULTRA+='{"branch_name":"libwrt","branch_url":"https://github.com/laipeng668/openwrt-6.x.git","branch_ref":"k6.12-nss","branch_config":"configs/libwrt_base.config","pkg_name":"Ultra","pkg_config":"configs/Ultra.config"}'
          MATRIX_ULTRA+=']}'
          
          # 构建其他配置的矩阵
          MATRIX_OTHERS='{"include":['
          # 添加Max配置
          MATRIX_OTHERS+='{"branch_name":"immwrt","branch_url":"https://github.com/laipeng668/immortalwrt.git","branch_ref":"master","branch_config":"configs/immwrt_base.config","pkg_name":"Max","pkg_config":"configs/Max.config"},'
          MATRIX_OTHERS+='{"branch_name":"openwrt","branch_url":"https://github.com/laipeng668/openwrt.git","branch_ref":"master","branch_config":"configs/openwrt_base.config","pkg_name":"Max","pkg_config":"configs/Max.config"},'
          MATRIX_OTHERS+='{"branch_name":"libwrt","branch_url":"https://github.com/laipeng668/openwrt-6.x.git","branch_ref":"k6.12-nss","branch_config":"configs/libwrt_base.config","pkg_name":"Max","pkg_config":"configs/Max.config"},'
          # 添加Pro配置
          MATRIX_OTHERS+='{"branch_name":"immwrt","branch_url":"https://github.com/laipeng668/immortalwrt.git","branch_ref":"master","branch_config":"configs/immwrt_base.config","pkg_name":"Pro","pkg_config":"configs/Pro.config"},'
          MATRIX_OTHERS+='{"branch_name":"openwrt","branch_url":"https://github.com/laipeng668/openwrt.git","branch_ref":"master","branch_config":"configs/openwrt_base.config","pkg_name":"Pro","pkg_config":"configs/Pro.config"},'
          MATRIX_OTHERS+='{"branch_name":"libwrt","branch_url":"https://github.com/laipeng668/openwrt-6.x.git","branch_ref":"k6.12-nss","branch_config":"configs/libwrt_base.config","pkg_name":"Pro","pkg_config":"configs/Pro.config"}'
          MATRIX_OTHERS+=']}'
          
          echo "matrix-ultra=$MATRIX_ULTRA" >> $GITHUB_OUTPUT
          echo "matrix-others=$MATRIX_OTHERS" >> $GITHUB_OUTPUT
          echo "生成的Ultra配置矩阵："
          echo "$MATRIX_ULTRA" | jq .
          echo "生成的其他配置矩阵："
          echo "$MATRIX_OTHERS" | jq .

  # 编译阶段1：编译所有分支的Ultra配置
  build-ultra:
    name: 编译 ${{ matrix.branch_name }}-${{ matrix.pkg_name }}
    needs: prepare
    runs-on: ${{ github.event.inputs.os_version || 'ubuntu-22.04' }}
    strategy:
      matrix: ${{ fromJson(needs.prepare.outputs.matrix-ultra) }}
      max-parallel: 3  # 限制最大并行数，避免资源耗尽
      fail-fast: false  # 一个任务失败不影响其他任务
    
    steps:
      - name: 清理磁盘空间
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: true
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          swap-storage: true

      - name: 检查服务器性能
        run: |
          echo "警告⚠"
          echo "分配的服务器性能有限，若选择的插件过多，务必注意CPU性能！"
          echo -e "已知CPU型号（降序）：7763，8370C，8272CL，8171M，E5-2673 \n"
          echo "--------------------------CPU信息--------------------------"
          echo "CPU物理数量：$(cat /proc/cpuinfo | grep "physical id" | sort | uniq | wc -l)"
          echo -e "CPU核心信息：$(cat /proc/cpuinfo | grep name | cut -f2 -d: | uniq -c) \n"
          echo "--------------------------内存信息--------------------------"
          echo "已安装内存详细信息："
          echo -e "$(sudo lshw -short -C memory | grep GiB) \n"
          echo "--------------------------硬盘信息--------------------------"
          echo "硬盘数量：$(ls /dev/sd* | grep -v [1-9] | wc -l)" && df -hT

      - name: 初始化环境
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          # 更新软件包列表并安装依赖
          sudo -E apt-get -y update
          sudo -E apt-get -y install $(curl -fsSL is.gd/depends_ubuntu_2204)
          sudo -E systemctl daemon-reload
          sudo timedatectl set-timezone "$TZ"

      - name: 检出代码
        uses: actions/checkout@main

      - name: 克隆源代码
        run: |
          # 显示工作空间磁盘使用情况
          df -hT $GITHUB_WORKSPACE
          # 创建源代码目录并设置权限
          sudo mkdir -p /mnt/${{ matrix.branch_name }}
          sudo chown -R $(id -u):$(id -g) /mnt/${{ matrix.branch_name }}
          # 克隆源代码
          git clone --depth 1 -b ${{ matrix.branch_ref }} --single-branch ${{ matrix.branch_url }} /mnt/${{ matrix.branch_name }}
          cd /mnt/${{ matrix.branch_name }}
          # 设置环境变量
          echo "OPENWRT_PATH=$PWD" >> $GITHUB_ENV
          VERSION_INFO=$(git show -s --date=short --format="作者: %an<br/>时间: %cd<br/>内容: %s<br/>hash: %H")
          echo "VERSION_INFO=$VERSION_INFO" >> $GITHUB_ENV
          VERSION_KERNEL=$(grep -oP 'LINUX_KERNEL_HASH-\K[0-9]+\.[0-9]+\.[0-9]+' target/linux/generic/kernel-6.12)
          echo "VERSION_KERNEL=$VERSION_KERNEL" >> $GITHUB_ENV

      - name: 生成变量
        run: |
          # 合并配置文件：芯片基础配置 + 分支基础配置 + 软件包配置
          cat ${{ env.CHIP_BASE_FILE }} ${{ matrix.branch_config }} ${{ matrix.pkg_config }} > $OPENWRT_PATH/.config
          cd $OPENWRT_PATH
          # 生成.defconfig文件
          make defconfig > /dev/null 2>&1
          # 设置环境变量
          SOURCE_REPO=${{ matrix.branch_name }}
          echo "SOURCE_REPO=$SOURCE_REPO" >> $GITHUB_ENV
          DEVICE_TARGET=$(cat .config | grep CONFIG_TARGET_BOARD | awk -F '"' '{print $2}')
          echo "DEVICE_TARGET=$DEVICE_TARGET" >> $GITHUB_ENV
          echo "HASH=$(git log -1 --pretty=format:'%h')" >> $GITHUB_ENV
          echo "CACHE_DATE=$(date +"%Y-%m-%d %H:%M:%S")" >> $GITHUB_ENV
          
          # 分层缓存键
          echo "CHIP_CACHE_KEY=${{ env.CHIP_TYPE }}" >> $GITHUB_ENV
          echo "BRANCH_CACHE_KEY=${{ env.CHIP_TYPE }}-${{ env.SOURCE_REPO }}" >> $GITHUB_ENV
          echo "VERSION_CACHE_KEY=${{ env.CHIP_TYPE }}-${{ env.SOURCE_REPO }}-${{ env.HASH }}" >> $GITHUB_ENV

      - name: 恢复工具链缓存
        if: github.event.inputs.start_stage != 'toolchain' && github.event.inputs.start_stage != 'full'
        uses: actions/cache@main
        with:
          key: ${{ env.CHIP_CACHE_KEY }}-toolchain
          restore-keys: |
            ${{ env.CHIP_CACHE_KEY }}-toolchain-
          path: |
            ${{ env.OPENWRT_PATH }}/staging_dir/toolchain*
        continue-on-error: true

      - name: 检查工具链缓存
        if: github.event.inputs.start_stage != 'toolchain' && github.event.inputs.start_stage != 'full'
        run: |
          if [ ! -d "$OPENWRT_PATH/staging_dir/toolchain-arm_cortex-a53+neon-vfpv4_gcc-13.3.0_musl_eabi" ]; then
            echo "错误：工具链缓存不存在，无法从${{ github.event.inputs.start_stage }}阶段开始编译"
            exit 1
          fi

      - name: 编译工具链
        if: github.event.inputs.start_stage == 'toolchain' || github.event.inputs.start_stage == 'full'
        run: |
          cd $OPENWRT_PATH
          echo "开始编译工具链..."
          make toolchain/install -j$(nproc) || make toolchain/install -j1 V=s
          echo "工具链编译完成"

      - name: 缓存工具链
        if: github.event.inputs.start_stage == 'toolchain' || github.event.inputs.start_stage == 'full'
        uses: actions/cache@main
        with:
          key: ${{ env.CHIP_CACHE_KEY }}-toolchain ${{ env.CACHE_DATE }}
          restore-keys: |
            ${{ env.CHIP_CACHE_KEY }}-toolchain-
          path: |
            ${{ env.OPENWRT_PATH }}/staging_dir/toolchain*

      - name: 恢复依赖包缓存
        if: github.event.inputs.start_stage == 'kernel' || github.event.inputs.start_stage == 'base' || github.event.inputs.start_stage == 'ipk'
        uses: actions/cache@main
        with:
          key: ${{ env.BRANCH_CACHE_KEY }}-packages
          restore-keys: |
            ${{ env.BRANCH_CACHE_KEY }}-packages-
          path: |
            ${{ env.OPENWRT_PATH }}/staging_dir/target*
            ${{ env.OPENWRT_PATH }}/staging_dir/host*
            ${{ env.OPENWRT_PATH }}/build_dir/target-arm_cortex-a53+neon-vfpv4_musl_eabi/package-*
        continue-on-error: true

      - name: 检查依赖包缓存
        if: github.event.inputs.start_stage == 'kernel' || github.event.inputs.start_stage == 'base' || github.event.inputs.start_stage == 'ipk'
        run: |
          if [ ! -d "$OPENWRT_PATH/staging_dir/target-arm_cortex-a53+neon-vfpv4_musl_eabi" ]; then
            echo "错误：依赖包缓存不存在，无法从${{ github.event.inputs.start_stage }}阶段开始编译"
            exit 1
          fi

      - name: 诊断编译环境
        if: github.event.inputs.start_stage == 'toolchain' || github.event.inputs.start_stage == 'packages' || github.event.inputs.start_stage == 'full'
        run: |
          cd $OPENWRT_PATH
          echo "检查依赖包状态..."
          ./scripts/feeds list -a
          echo "检查配置文件..."
          cat .config | grep -i php || echo "未找到PHP相关配置"
          echo "检查系统资源..."
          free -h
          df -h

      - name: 加载自定义配置
        if: github.event.inputs.start_stage == 'toolchain' || github.event.inputs.start_stage == 'packages' || github.event.inputs.start_stage == 'full'
        run: |
          # 修改默认IP & 固件名称 & 编译署名
          sed -i 's/192.168.1.1/192.168.111.1/g' $OPENWRT_PATH/package/base-files/files/bin/config_generate
          sed -i "s/hostname='.*'/hostname='WRT'/g" $OPENWRT_PATH/package/base-files/files/bin/config_generate
          # 注释掉可能导致错误的行
          # sed -i "s/(\(luciversion || ''\))/(\1) + (' \/ Built by Mary')/g" $OPENWRT_PATH/feeds/luci/modules/luci-mod-status/htdocs/luci-static/resources/view/status/include/10_system.js

          # 修改管理员密码和无线密码为空
          sed -i 's/root:::0:0:99999:7:::/root:$1$Vt0N2QhY$T8mXfJ7gJf9L7P6F5b4D8.:18232:0:99999:7:::/g' $OPENWRT_PATH/package/base-files/files/etc/shadow
          # 注释掉可能导致错误的行
          # sed -i "s/option encryption 'psk2'/option encryption 'none'/g" $OPENWRT_PATH/package/kernel/mac80211/files/lib/wifi/mac80211.sh
          # sed -i "s/option key '12345678'/option key ''/g" $OPENWRT_PATH/package/kernel/mac80211/files/lib/wifi/mac80211.sh

          # 安全移除要替换的包（先检查是否存在）
          [ -d "$OPENWRT_PATH/feeds/luci/applications/luci-app-appfilter" ] && rm -rf $OPENWRT_PATH/feeds/luci/applications/luci-app-appfilter
          [ -d "$OPENWRT_PATH/feeds/luci/applications/luci-app-frpc" ] && rm -rf $OPENWRT_PATH/feeds/luci/applications/luci-app-frpc
          [ -d "$OPENWRT_PATH/feeds/luci/applications/luci-app-frps" ] && rm -rf $OPENWRT_PATH/feeds/luci/applications/luci-app-frps
          [ -d "$OPENWRT_PATH/feeds/packages/net/open-app-filter" ] && rm -rf $OPENWRT_PATH/feeds/packages/net/open-app-filter
          [ -d "$OPENWRT_PATH/feeds/packages/net/adguardhome" ] && rm -rf $OPENWRT_PATH/feeds/packages/net/adguardhome
          [ -d "$OPENWRT_PATH/feeds/packages/net/ariang" ] && rm -rf $OPENWRT_PATH/feeds/packages/net/ariang
          [ -d "$OPENWRT_PATH/feeds/packages/net/frp" ] && rm -rf $OPENWRT_PATH/feeds/packages/net/frp
          [ -d "$OPENWRT_PATH/feeds/packages/lang/golang" ] && rm -rf $OPENWRT_PATH/feeds/packages/lang/golang

          # Git稀疏克隆，只克隆指定目录到本地
          function git_sparse_clone() {
            branch="$1" repourl="$2" && shift 2
            git clone --depth=1 -b $branch --single-branch --filter=blob:none --sparse $repourl
            repodir=$(echo $repourl | awk -F '/' '{print $(NF)}')
            cd $repodir && git sparse-checkout set $@
            # 修复路径问题，确保目标目录存在
            mkdir -p $OPENWRT_PATH/package
            mv -f $@ $OPENWRT_PATH/package/
            cd .. && rm -rf $repodir
          }

          # 确保目标目录存在
          mkdir -p $OPENWRT_PATH/feeds/packages/net
          mkdir -p $OPENWRT_PATH/feeds/luci/applications
          mkdir -p $OPENWRT_PATH/feeds/packages/lang

          # Go & OpenList & ariang & frp & AdGuardHome & WolPlus & Lucky & OpenAppFilter & 集客无线AC控制器 & 雅典娜LED控制
          git clone --depth=1 https://github.com/sbwml/packages_lang_golang $OPENWRT_PATH/feeds/packages/lang/golang
          git clone --depth=1 https://github.com/sbwml/luci-app-openlist2 $OPENWRT_PATH/package/openlist
          git_sparse_clone ariang https://github.com/laipeng668/packages net/ariang
          git_sparse_clone frp https://github.com/laipeng668/packages net/frp
          # 确保目标目录存在后再移动
          if [ -d "$OPENWRT_PATH/package/frp" ]; then
            mv -f $OPENWRT_PATH/package/frp $OPENWRT_PATH/feeds/packages/net/frp
          fi
          git_sparse_clone frp https://github.com/laipeng668/luci applications/luci-app-frpc applications/luci-app-frps
          # 确保目标目录存在后再移动
          if [ -d "$OPENWRT_PATH/package/luci-app-frpc" ]; then
            mv -f $OPENWRT_PATH/package/luci-app-frpc $OPENWRT_PATH/feeds/luci/applications/luci-app-frpc
          fi
          if [ -d "$OPENWRT_PATH/package/luci-app-frps" ]; then
            mv -f $OPENWRT_PATH/package/luci-app-frps $OPENWRT_PATH/feeds/luci/applications/luci-app-frps
          fi
          git_sparse_clone main https://github.com/VIKINGYFY/packages luci-app-wolplus
          git clone --depth=1 https://github.com/gdy666/luci-app-lucky $OPENWRT_PATH/package/luci-app-lucky
          git clone --depth=1 https://github.com/destan19/OpenAppFilter.git $OPENWRT_PATH/package/OpenAppFilter
          git clone --depth=1 https://github.com/lwb1978/openwrt-gecoosac $OPENWRT_PATH/package/openwrt-gecoosac
          git clone --depth=1 https://github.com/NONGFAH/luci-app-athena-led $OPENWRT_PATH/package/luci-app-athena-led
          chmod +x $OPENWRT_PATH/package/luci-app-athena-led/root/etc/init.d/athena_led $OPENWRT_PATH/package/luci-app-athena-led/root/usr/sbin/athena-led

          # ====== Mary定制包 ======
          git clone --depth=1 https://github.com/sirpdboy/luci-app-netspeedtest $OPENWRT_PATH/package/netspeedtest
          git clone --depth=1 https://github.com/sirpdboy/luci-app-partexp $OPENWRT_PATH/package/luci-app-partexp
          git clone --depth=1 https://github.com/sirpdboy/luci-app-taskplan $OPENWRT_PATH/package/luci-app-taskplan
          git clone --depth=1 https://github.com/tailscale/tailscale $OPENWRT_PATH/package/tailscale
          git clone --depth=1 https://github.com/nikkinikki-org/OpenWrt-momo $OPENWRT_PATH/package/luci-app-momo
          git clone --depth=1 https://github.com/nikkinikki-org/OpenWrt-nikki $OPENWRT_PATH/package/nikki
          git clone --depth=1 https://github.com/vernesong/OpenClash $OPENWRT_PATH/package/OpenClash

          # ====== 添加kenzok8软件源并且让它的优先级最低，也就是如果有软件包冲突，它的软件包会被其它软件源替代。 ======
          git clone --depth=1 https://github.com/ $OPENWRT_PATH/small8

          cd $OPENWRT_PATH
          ./scripts/feeds update -a
          ./scripts/feeds install -a

      - name: 检查PHP相关包配置
        if: github.event.inputs.start_stage == 'toolchain' || github.event.inputs.start_stage == 'packages' || github.event.inputs.start_stage == 'full'
        run: |
          cd $OPENWRT_PATH
          echo "检查配置文件中可能引起问题的PHP相关配置..."
          # 查找所有PHP相关的配置
          php_configs=$(grep -i "CONFIG_PACKAGE_php" .config || true)
          if [ -n "$php_configs" ]; then
            echo "发现PHP相关配置，将被禁用："
            echo "$php_configs"
            # 禁用所有PHP相关的包
            sed -i '/CONFIG_PACKAGE_php/d' .config
            echo "已禁用所有PHP相关包"
          else
            echo "未发现PHP相关配置"
          fi
          # 重新生成配置文件
          make defconfig > /dev/null 2>&1

      - name: 编译依赖包
        if: github.event.inputs.start_stage == 'toolchain' || github.event.inputs.start_stage == 'packages' || github.event.inputs.start_stage == 'full'
        run: |
          cd $OPENWRT_PATH
          echo "开始编译依赖包..."
          # 尝试编译，如果失败则输出更详细的错误信息
          if ! make package/compile -j$(nproc); then
            echo "编译依赖包失败，尝试单线程编译..."
            make package/compile -j1 V=s
          fi
          echo "依赖包编译完成"

      - name: 缓存依赖包
        if: github.event.inputs.start_stage == 'toolchain' || github.event.inputs.start_stage == 'packages' || github.event.inputs.start_stage == 'full'
        uses: actions/cache@main
        with:
          key: ${{ env.BRANCH_CACHE_KEY }}-packages ${{ env.CACHE_DATE }}
          restore-keys: |
            ${{ env.BRANCH_CACHE_KEY }}-packages-
          path: |
            ${{ env.OPENWRT_PATH }}/staging_dir/target*
            ${{ env.OPENWRT_PATH }}/staging_dir/host*
            ${{ env.OPENWRT_PATH }}/build_dir/target-arm_cortex-a53+neon-vfpv4_musl_eabi/package-*

      - name: 恢复内核缓存
        if: github.event.inputs.start_stage == 'base' || github.event.inputs.start_stage == 'ipk'
        uses: actions/cache@main
        with:
          key: ${{ env.BRANCH_CACHE_KEY }}-kernel
          restore-keys: |
            ${{ env.BRANCH_CACHE_KEY }}-kernel-
          path: |
            ${{ env.OPENWRT_PATH }}/build_dir/target-arm_cortex-a53+neon-vfpv4_musl_eabi/linux-*
        continue-on-error: true

      - name: 检查内核缓存
        if: github.event.inputs.start_stage == 'base' || github.event.inputs.start_stage == 'ipk'
        run: |
          if [ ! -d "$OPENWRT_PATH/build_dir/target-arm_cortex-a53+neon-vfpv4_musl_eabi/linux-"* ]; then
            echo "错误：内核缓存不存在，无法从${{ github.event.inputs.start_stage }}阶段开始编译"
            exit 1
          fi

      - name: 编译内核
        if: github.event.inputs.start_stage == 'toolchain' || github.event.inputs.start_stage == 'packages' || github.event.inputs.start_stage == 'kernel' || github.event.inputs.start_stage == 'full'
        run: |
          cd $OPENWRT_PATH
          echo "开始编译内核..."
          make target/linux/compile -j$(nproc) || make target/linux/compile -j1 V=s
          echo "内核编译完成"

      - name: 缓存内核
        if: github.event.inputs.start_stage == 'toolchain' || github.event.inputs.start_stage == 'packages' || github.event.inputs.start_stage == 'kernel' || github.event.inputs.start_stage == 'full'
        uses: actions/cache@main
        with:
          key: ${{ env.BRANCH_CACHE_KEY }}-kernel ${{ env.CACHE_DATE }}
          restore-keys: |
            ${{ env.BRANCH_CACHE_KEY }}-kernel-
          path: |
            ${{ env.OPENWRT_PATH }}/build_dir/target-arm_cortex-a53+neon-vfpv4_musl_eabi/linux-*

      - name: 恢复基础系统缓存
        if: github.event.inputs.start_stage == 'ipk'
        uses: actions/cache@main
        with:
          key: ${{ env.VERSION_CACHE_KEY }}-base
          restore-keys: |
            ${{ env.VERSION_CACHE_KEY }}-base-
          path: |
            ${{ env.OPENWRT_PATH }}/build_dir/target-arm_cortex-a53+neon-vfpv4_musl_eabi/root-*
        continue-on-error: true

      - name: 检查基础系统缓存
        if: github.event.inputs.start_stage == 'ipk'
        run: |
          if [ ! -d "$OPENWRT_PATH/build_dir/target-arm_cortex-a53+neon-vfpv4_musl_eabi/root-"* ]; then
            echo "错误：基础系统缓存不存在，无法从${{ github.event.inputs.start_stage }}阶段开始编译"
            exit 1
          fi

      - name: 编译基础系统
        if: github.event.inputs.start_stage == 'toolchain' || github.event.inputs.start_stage == 'packages' || github.event.inputs.start_stage == 'kernel' || github.event.inputs.start_stage == 'base' || github.event.inputs.start_stage == 'full'
        run: |
          cd $OPENWRT_PATH
          echo "开始编译基础系统..."
          make target/linux/install -j$(nproc) || make target/linux/install -j1 V=s
          make package/install -j$(nproc) || make package/install -j1 V=s
          echo "基础系统编译完成"

      - name: 缓存基础系统
        if: github.event.inputs.start_stage == 'toolchain' || github.event.inputs.start_stage == 'packages' || github.event.inputs.start_stage == 'kernel' || github.event.inputs.start_stage == 'base' || github.event.inputs.start_stage == 'full'
        uses: actions/cache@main
        with:
          key: ${{ env.VERSION_CACHE_KEY }}-base ${{ env.CACHE_DATE }}
          restore-keys: |
            ${{ env.VERSION_CACHE_KEY }}-base-
          path: |
            ${{ env.OPENWRT_PATH }}/build_dir/target-arm_cortex-a53+neon-vfpv4_musl_eabi/root-*

      - name: 编译软件包并生成固件
        if: github.event.inputs.start_stage == 'toolchain' || github.event.inputs.start_stage == 'packages' || github.event.inputs.start_stage == 'kernel' || github.event.inputs.start_stage == 'base' || github.event.inputs.start_stage == 'ipk' || github.event.inputs.start_stage == 'full'
        id: compile
        run: |
          cd $OPENWRT_PATH
          echo "开始编译软件包并生成固件..."
          make package/compile -j$(nproc) || make package/compile -j1 V=s
          make package/install -j$(nproc) || make package/install -j1 V=s
          make image -j$(nproc) || make image -j1 V=s
          echo "status=success" >> $GITHUB_OUTPUT
          echo "DATE=$(date +"%Y-%m-%d %H:%M:%S")" >> $GITHUB_ENV
          echo "FILE_DATE=$(date +"%Y.%m.%d")" >> $GITHUB_ENV

      - name: 检查空间使用情况
        if: (!cancelled())
        run: df -hT

      - name: 整理文件
        if: steps.compile.outputs.status == 'success'
        run: |
          # 创建临时目录
          mkdir -p $GITHUB_WORKSPACE/artifacts
          
          # 进入固件目录
          cd $OPENWRT_PATH/bin/targets/*/*
          
          # 复制并重命名配置文件
          cp $OPENWRT_PATH/.config $GITHUB_WORKSPACE/artifacts/${{ matrix.branch_name }}-${{ env.CHIP_TYPE }}-${{ matrix.pkg_name }}.config
          mv config.buildinfo $GITHUB_WORKSPACE/artifacts/${{ matrix.branch_name }}-${{ env.CHIP_TYPE }}-${{ matrix.pkg_name }}.config.buildinfo
          mv *.manifest $GITHUB_WORKSPACE/artifacts/${{ matrix.branch_name }}-${{ env.CHIP_TYPE }}-${{ matrix.pkg_name }}.manifest
          
          # 重命名固件文件
          for file in *.bin; do
            if [[ $file == *"factory"* ]]; then
              new_file="${{ matrix.branch_name }}-${{ env.CHIP_TYPE }}-$(echo $file | sed -n 's/.*-\(jdcloud_.*\)-squashfs-factory.bin/\1/p')-factory-${{ matrix.pkg_name }}.bin"
            elif [[ $file == *"sysupgrade"* ]]; then
              new_file="${{ matrix.branch_name }}-${{ env.CHIP_TYPE }}-$(echo $file | sed -n 's/.*-\(jdcloud_.*\)-squashfs-sysupgrade.bin/\1/p')-sysupgrade-${{ matrix.pkg_name }}.bin"
            else
              new_file="${{ matrix.branch_name }}-${{ env.CHIP_TYPE }}-$(echo $file | sed -n 's/.*-\(jdcloud_.*\)\.bin/\1/p')-${{ matrix.pkg_name }}.bin"
            fi
            mv "$file" "$GITHUB_WORKSPACE/artifacts/$new_file"
          done
          
          # 复制软件包
          mkdir -p $GITHUB_WORKSPACE/artifacts/packages
          mv -f $OPENWRT_PATH/bin/packages/*/*/*.apk $GITHUB_WORKSPACE/artifacts/packages/ 2>/dev/null || true
          mv -f $OPENWRT_PATH/bin/packages/*/*/*.ipk $GITHUB_WORKSPACE/artifacts/packages/ 2>/dev/null || true
          
          # 复制编译日志
          mkdir -p $GITHUB_WORKSPACE/artifacts/logs
          cp $OPENWRT_PATH/logs/* $GITHUB_WORKSPACE/artifacts/logs/ 2>/dev/null || true
          
          echo "ARTIFACTS_PATH=$GITHUB_WORKSPACE/artifacts" >> $GITHUB_ENV

      - name: 上传构建产物
        if: steps.compile.outputs.status == 'success'
        uses: actions/upload-artifact@main
        with:
          name: ${{ matrix.branch_name }}-${{ matrix.pkg_name }}-${{ env.FILE_DATE }}
          path: ${{ env.ARTIFACTS_PATH }}
          retention-days: 7

      - name: 删除旧缓存
        if: always()
        run: |
          # 删除芯片级别的旧缓存
          gh cache list --key ${{ env.CHIP_CACHE_KEY }}- --json key --jq '.[] | .key' | while read -r key; do
            gh cache delete "$key"
          done
          # 删除分支级别的旧缓存
          gh cache list --key ${{ env.BRANCH_CACHE_KEY }}- --json key --jq '.[] | .key' | while read -r key; do
            gh cache delete "$key"
          done
          # 删除版本级别的旧缓存
          gh cache list --key ${{ env.VERSION_CACHE_KEY }}- --json key --jq '.[] | .key' | while read -r key; do
            gh cache delete "$key"
          done
          # 输出缓存状态
          echo "========cache status========"
          echo "ccache: $(du -sh $OPENWRT_PATH/.ccache | cut -f 1)"
          echo "staging: $(du -sh $OPENWRT_PATH/staging_dir | cut -f 1)"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # 编译阶段2：编译所有分支的其他配置（Max和Pro）
  build-others:
    name: 编译 ${{ matrix.branch_name }}-${{ matrix.pkg_name }}
    needs: [prepare, build-ultra]  # 依赖build-ultra，确保Ultra配置先编译完成
    runs-on: ${{ github.event.inputs.os_version || 'ubuntu-22.04' }}
    strategy:
      matrix: ${{ fromJson(needs.prepare.outputs.matrix-others) }}
      max-parallel: 3  # 限制最大并行数，避免资源耗尽
      fail-fast: false  # 一个任务失败不影响其他任务
    
    steps:
      - name: 清理磁盘空间
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: true
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          swap-storage: true

      - name: 检查服务器性能
        run: |
          echo "警告⚠"
          echo "分配的服务器性能有限，若选择的插件过多，务必注意CPU性能！"
          echo -e "已知CPU型号（降序）：7763，8370C，8272CL，8171M，E5-2673 \n"
          echo "--------------------------CPU信息--------------------------"
          echo "CPU物理数量：$(cat /proc/cpuinfo | grep "physical id" | sort | uniq | wc -l)"
          echo -e "CPU核心信息：$(cat /proc/cpuinfo | grep name | cut -f2 -d: | uniq -c) \n"
          echo "--------------------------内存信息--------------------------"
          echo "已安装内存详细信息："
          echo -e "$(sudo lshw -short -C memory | grep GiB) \n"
          echo "--------------------------硬盘信息--------------------------"
          echo "硬盘数量：$(ls /dev/sd* | grep -v [1-9] | wc -l)" && df -hT

      - name: 初始化环境
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          # 更新软件包列表并安装依赖
          sudo -E apt-get -y update
          sudo -E apt-get -y install $(curl -fsSL is.gd/depends_ubuntu_2204)
          sudo -E systemctl daemon-reload
          sudo timedatectl set-timezone "$TZ"

      - name: 检出代码
        uses: actions/checkout@main

      - name: 克隆源代码
        run: |
          # 显示工作空间磁盘使用情况
          df -hT $GITHUB_WORKSPACE
          # 创建源代码目录并设置权限
          sudo mkdir -p /mnt/${{ matrix.branch_name }}
          sudo chown -R $(id -u):$(id -g) /mnt/${{ matrix.branch_name }}
          # 克隆源代码
          git clone --depth 1 -b ${{ matrix.branch_ref }} --single-branch ${{ matrix.branch_url }} /mnt/${{ matrix.branch_name }}
          cd /mnt/${{ matrix.branch_name }}
          # 设置环境变量
          echo "OPENWRT_PATH=$PWD" >> $GITHUB_ENV
          VERSION_INFO=$(git show -s --date=short --format="作者: %an<br/>时间: %cd<br/>内容: %s<br/>hash: %H")
          echo "VERSION_INFO=$VERSION_INFO" >> $GITHUB_ENV
          VERSION_KERNEL=$(grep -oP 'LINUX_KERNEL_HASH-\K[0-9]+\.[0-9]+\.[0-9]+' target/linux/generic/kernel-6.12)
          echo "VERSION_KERNEL=$VERSION_KERNEL" >> $GITHUB_ENV

      - name: 生成变量
        run: |
          # 合并配置文件：芯片基础配置 + 分支基础配置 + 软件包配置
          cat ${{ env.CHIP_BASE_FILE }} ${{ matrix.branch_config }} ${{ matrix.pkg_config }} > $OPENWRT_PATH/.config
          cd $OPENWRT_PATH
          # 生成.defconfig文件
          make defconfig > /dev/null 2>&1
          # 设置环境变量
          SOURCE_REPO=${{ matrix.branch_name }}
          echo "SOURCE_REPO=$SOURCE_REPO" >> $GITHUB_ENV
          DEVICE_TARGET=$(cat .config | grep CONFIG_TARGET_BOARD | awk -F '"' '{print $2}')
          echo "DEVICE_TARGET=$DEVICE_TARGET" >> $GITHUB_ENV
          echo "HASH=$(git log -1 --pretty=format:'%h')" >> $GITHUB_ENV
          echo "CACHE_DATE=$(date +"%Y-%m-%d %H:%M:%S")" >> $GITHUB_ENV
          
          # 分层缓存键
          echo "CHIP_CACHE_KEY=${{ env.CHIP_TYPE }}" >> $GITHUB_ENV
          echo "BRANCH_CACHE_KEY=${{ env.CHIP_TYPE }}-${{ env.SOURCE_REPO }}" >> $GITHUB_ENV
          echo "VERSION_CACHE_KEY=${{ env.CHIP_TYPE }}-${{ env.SOURCE_REPO }}-${{ env.HASH }}" >> $GITHUB_ENV

      - name: 恢复工具链缓存
        if: github.event.inputs.start_stage != 'toolchain' && github.event.inputs.start_stage != 'full'
        uses: actions/cache@main
        with:
          key: ${{ env.CHIP_CACHE_KEY }}-toolchain
          restore-keys: |
            ${{ env.CHIP_CACHE_KEY }}-toolchain-
          path: |
            ${{ env.OPENWRT_PATH }}/staging_dir/toolchain*
        continue-on-error: true

      - name: 检查工具链缓存
        if: github.event.inputs.start_stage != 'toolchain' && github.event.inputs.start_stage != 'full'
        run: |
          if [ ! -d "$OPENWRT_PATH/staging_dir/toolchain-arm_cortex-a53+neon-vfpv4_gcc-13.3.0_musl_eabi" ]; then
            echo "错误：工具链缓存不存在，无法从${{ github.event.inputs.start_stage }}阶段开始编译"
            exit 1
          fi

      - name: 编译工具链
        if: github.event.inputs.start_stage == 'toolchain' || github.event.inputs.start_stage == 'full'
        run: |
          cd $OPENWRT_PATH
          echo "开始编译工具链..."
          make toolchain/install -j$(nproc) || make toolchain/install -j1 V=s
          echo "工具链编译完成"

      - name: 缓存工具链
        if: github.event.inputs.start_stage == 'toolchain' || github.event.inputs.start_stage == 'full'
        uses: actions/cache@main
        with:
          key: ${{ env.CHIP_CACHE_KEY }}-toolchain ${{ env.CACHE_DATE }}
          restore-keys: |
            ${{ env.CHIP_CACHE_KEY }}-toolchain-
          path: |
            ${{ env.OPENWRT_PATH }}/staging_dir/toolchain*

      - name: 恢复依赖包缓存
        if: github.event.inputs.start_stage == 'kernel' || github.event.inputs.start_stage == 'base' || github.event.inputs.start_stage == 'ipk'
        uses: actions/cache@main
        with:
          key: ${{ env.BRANCH_CACHE_KEY }}-packages
          restore-keys: |
            ${{ env.BRANCH_CACHE_KEY }}-packages-
          path: |
            ${{ env.OPENWRT_PATH }}/staging_dir/target*
            ${{ env.OPENWRT_PATH }}/staging_dir/host*
            ${{ env.OPENWRT_PATH }}/build_dir/target-arm_cortex-a53+neon-vfpv4_musl_eabi/package-*
        continue-on-error: true

      - name: 检查依赖包缓存
        if: github.event.inputs.start_stage == 'kernel' || github.event.inputs.start_stage == 'base' || github.event.inputs.start_stage == 'ipk'
        run: |
          if [ ! -d "$OPENWRT_PATH/staging_dir/target-arm_cortex-a53+neon-vfpv4_musl_eabi" ]; then
            echo "错误：依赖包缓存不存在，无法从${{ github.event.inputs.start_stage }}阶段开始编译"
            exit 1
          fi

      - name: 诊断编译环境
        if: github.event.inputs.start_stage == 'toolchain' || github.event.inputs.start_stage == 'packages' || github.event.inputs.start_stage == 'full'
        run: |
          cd $OPENWRT_PATH
          echo "检查依赖包状态..."
          ./scripts/feeds list -a
          echo "检查配置文件..."
          cat .config | grep -i php || echo "未找到PHP相关配置"
          echo "检查系统资源..."
          free -h
          df -h

      - name: 加载自定义配置
        if: github.event.inputs.start_stage == 'toolchain' || github.event.inputs.start_stage == 'packages' || github.event.inputs.start_stage == 'full'
        run: |
          # 修改默认IP & 固件名称 & 编译署名
          sed -i 's/192.168.1.1/192.168.111.1/g' $OPENWRT_PATH/package/base-files/files/bin/config_generate
          sed -i "s/hostname='.*'/hostname='WRT'/g" $OPENWRT_PATH/package/base-files/files/bin/config_generate
          # 注释掉可能导致错误的行
          # sed -i "s/(\(luciversion || ''\))/(\1) + (' \/ Built by Mary')/g" $OPENWRT_PATH/feeds/luci/modules/luci-mod-status/htdocs/luci-static/resources/view/status/include/10_system.js

          # 修改管理员密码和无线密码为空
          sed -i 's/root:::0:0:99999:7:::/root:$1$Vt0N2QhY$T8mXfJ7gJf9L7P6F5b4D8.:18232:0:99999:7:::/g' $OPENWRT_PATH/package/base-files/files/etc/shadow
          # 注释掉可能导致错误的行
          # sed -i "s/option encryption 'psk2'/option encryption 'none'/g" $OPENWRT_PATH/package/kernel/mac80211/files/lib/wifi/mac80211.sh
          # sed -i "s/option key '12345678'/option key ''/g" $OPENWRT_PATH/package/kernel/mac80211/files/lib/wifi/mac80211.sh

          # 安全移除要替换的包（先检查是否存在）
          [ -d "$OPENWRT_PATH/feeds/luci/applications/luci-app-appfilter" ] && rm -rf $OPENWRT_PATH/feeds/luci/applications/luci-app-appfilter
          [ -d "$OPENWRT_PATH/feeds/luci/applications/luci-app-frpc" ] && rm -rf $OPENWRT_PATH/feeds/luci/applications/luci-app-frpc
          [ -d "$OPENWRT_PATH/feeds/luci/applications/luci-app-frps" ] && rm -rf $OPENWRT_PATH/feeds/luci/applications/luci-app-frps
          [ -d "$OPENWRT_PATH/feeds/packages/net/open-app-filter" ] && rm -rf $OPENWRT_PATH/feeds/packages/net/open-app-filter
          [ -d "$OPENWRT_PATH/feeds/packages/net/adguardhome" ] && rm -rf $OPENWRT_PATH/feeds/packages/net/adguardhome
          [ -d "$OPENWRT_PATH/feeds/packages/net/ariang" ] && rm -rf $OPENWRT_PATH/feeds/packages/net/ariang
          [ -d "$OPENWRT_PATH/feeds/packages/net/frp" ] && rm -rf $OPENWRT_PATH/feeds/packages/net/frp
          [ -d "$OPENWRT_PATH/feeds/packages/lang/golang" ] && rm -rf $OPENWRT_PATH/feeds/packages/lang/golang

          # Git稀疏克隆，只克隆指定目录到本地
          function git_sparse_clone() {
            branch="$1" repourl="$2" && shift 2
            git clone --depth=1 -b $branch --single-branch --filter=blob:none --sparse $repourl
            repodir=$(echo $repourl | awk -F '/' '{print $(NF)}')
            cd $repodir && git sparse-checkout set $@
            # 修复路径问题，确保目标目录存在
            mkdir -p $OPENWRT_PATH/package
            mv -f $@ $OPENWRT_PATH/package/
            cd .. && rm -rf $repodir
          }

          # 确保目标目录存在
          mkdir -p $OPENWRT_PATH/feeds/packages/net
          mkdir -p $OPENWRT_PATH/feeds/luci/applications
          mkdir -p $OPENWRT_PATH/feeds/packages/lang

          # Go & OpenList & ariang & frp & AdGuardHome & WolPlus & Lucky & OpenAppFilter & 集客无线AC控制器 & 雅典娜LED控制
          git clone --depth=1 https://github.com/sbwml/packages_lang_golang $OPENWRT_PATH/feeds/packages/lang/golang
          git clone --depth=1 https://github.com/sbwml/luci-app-openlist2 $OPENWRT_PATH/package/openlist
          git_sparse_clone ariang https://github.com/laipeng668/packages net/ariang
          git_sparse_clone frp https://github.com/laipeng668/packages net/frp
          # 确保目标目录存在后再移动
          if [ -d "$OPENWRT_PATH/package/frp" ]; then
            mv -f $OPENWRT_PATH/package/frp $OPENWRT_PATH/feeds/packages/net/frp
          fi
          git_sparse_clone frp https://github.com/laipeng668/luci applications/luci-app-frpc applications/luci-app-frps
          # 确保目标目录存在后再移动
          if [ -d "$OPENWRT_PATH/package/luci-app-frpc" ]; then
            mv -f $OPENWRT_PATH/package/luci-app-frpc $OPENWRT_PATH/feeds/luci/applications/luci-app-frpc
          fi
          if [ -d "$OPENWRT_PATH/package/luci-app-frps" ]; then
            mv -f $OPENWRT_PATH/package/luci-app-frps $OPENWRT_PATH/feeds/luci/applications/luci-app-frps
          fi
          git_sparse_clone main https://github.com/VIKINGYFY/packages luci-app-wolplus
          git clone --depth=1 https://github.com/gdy666/luci-app-lucky $OPENWRT_PATH/package/luci-app-lucky
          git clone --depth=1 https://github.com/destan19/OpenAppFilter.git $OPENWRT_PATH/package/OpenAppFilter
          git clone --depth=1 https://github.com/lwb1978/openwrt-gecoosac $OPENWRT_PATH/package/openwrt-gecoosac
          git clone --depth=1 https://github.com/NONGFAH/luci-app-athena-led $OPENWRT_PATH/package/luci-app-athena-led
          chmod +x $OPENWRT_PATH/package/luci-app-athena-led/root/etc/init.d/athena_led $OPENWRT_PATH/package/luci-app-athena-led/root/usr/sbin/athena-led

          # ====== Mary定制包 ======
          git clone --depth=1 https://github.com/sirpdboy/luci-app-netspeedtest $OPENWRT_PATH/package/netspeedtest
          git clone --depth=1 https://github.com/sirpdboy/luci-app-partexp $OPENWRT_PATH/package/luci-app-partexp
          git clone --depth=1 https://github.com/sirpdboy/luci-app-taskplan $OPENWRT_PATH/package/luci-app-taskplan
          git clone --depth=1 https://github.com/tailscale/tailscale $OPENWRT_PATH/package/tailscale
          git clone --depth=1 https://github.com/nikkinikki-org/OpenWrt-momo $OPENWRT_PATH/package/luci-app-momo
          git clone --depth=1 https://github.com/nikkinikki-org/OpenWrt-nikki $OPENWRT_PATH/package/nikki
          git clone --depth=1 https://github.com/vernesong/OpenClash $OPENWRT_PATH/package/OpenClash

          # ====== 添加kenzok8软件源并且让它的优先级最低，也就是如果有软件包冲突，它的软件包会被其它软件源替代。 ======
          git clone small8 https://github.com/kenzok8/small-package

          cd $OPENWRT_PATH
          ./scripts/feeds update -a
          ./scripts/feeds install -a

      - name: 检查PHP相关包配置
        if: github.event.inputs.start_stage == 'toolchain' || github.event.inputs.start_stage == 'packages' || github.event.inputs.start_stage == 'full'
        run: |
          cd $OPENWRT_PATH
          echo "检查配置文件中可能引起问题的PHP相关配置..."
          # 查找所有PHP相关的配置
          php_configs=$(grep -i "CONFIG_PACKAGE_php" .config || true)
          if [ -n "$php_configs" ]; then
            echo "发现PHP相关配置，将被禁用："
            echo "$php_configs"
            # 禁用所有PHP相关的包
            sed -i '/CONFIG_PACKAGE_php/d' .config
            echo "已禁用所有PHP相关包"
          else
            echo "未发现PHP相关配置"
          fi
          # 重新生成配置文件
          make defconfig > /dev/null 2>&1

      - name: 编译依赖包
        if: github.event.inputs.start_stage == 'toolchain' || github.event.inputs.start_stage == 'packages' || github.event.inputs.start_stage == 'full'
        run: |
          cd $OPENWRT_PATH
          echo "开始编译依赖包..."
          # 尝试编译，如果失败则输出更详细的错误信息
          if ! make package/compile -j$(nproc); then
            echo "编译依赖包失败，尝试单线程编译..."
            make package/compile -j1 V=s
          fi
          echo "依赖包编译完成"

      - name: 缓存依赖包
        if: github.event.inputs.start_stage == 'toolchain' || github.event.inputs.start_stage == 'packages' || github.event.inputs.start_stage == 'full'
        uses: actions/cache@main
        with:
          key: ${{ env.BRANCH_CACHE_KEY }}-packages ${{ env.CACHE_DATE }}
          restore-keys: |
            ${{ env.BRANCH_CACHE_KEY }}-packages-
          path: |
            ${{ env.OPENWRT_PATH }}/staging_dir/target*
            ${{ env.OPENWRT_PATH }}/staging_dir/host*
            ${{ env.OPENWRT_PATH }}/build_dir/target-arm_cortex-a53+neon-vfpv4_musl_eabi/package-*

      - name: 恢复内核缓存
        if: github.event.inputs.start_stage == 'base' || github.event.inputs.start_stage == 'ipk'
        uses: actions/cache@main
        with:
          key: ${{ env.BRANCH_CACHE_KEY }}-kernel
          restore-keys: |
            ${{ env.BRANCH_CACHE_KEY }}-kernel-
          path: |
            ${{ env.OPENWRT_PATH }}/build_dir/target-arm_cortex-a53+neon-vfpv4_musl_eabi/linux-*
        continue-on-error: true

      - name: 检查内核缓存
        if: github.event.inputs.start_stage == 'base' || github.event.inputs.start_stage == 'ipk'
        run: |
          if [ ! -d "$OPENWRT_PATH/build_dir/target-arm_cortex-a53+neon-vfpv4_musl_eabi/linux-"* ]; then
            echo "错误：内核缓存不存在，无法从${{ github.event.inputs.start_stage }}阶段开始编译"
            exit 1
          fi

      - name: 编译内核
        if: github.event.inputs.start_stage == 'toolchain' || github.event.inputs.start_stage == 'packages' || github.event.inputs.start_stage == 'kernel' || github.event.inputs.start_stage == 'full'
        run: |
          cd $OPENWRT_PATH
          echo "开始编译内核..."
          make target/linux/compile -j$(nproc) || make target/linux/compile -j1 V=s
          echo "内核编译完成"

      - name: 缓存内核
        if: github.event.inputs.start_stage == 'toolchain' || github.event.inputs.start_stage == 'packages' || github.event.inputs.start_stage == 'kernel' || github.event.inputs.start_stage == 'full'
        uses: actions/cache@main
        with:
          key: ${{ env.BRANCH_CACHE_KEY }}-kernel ${{ env.CACHE_DATE }}
          restore-keys: |
            ${{ env.BRANCH_CACHE_KEY }}-kernel-
          path: |
            ${{ env.OPENWRT_PATH }}/build_dir/target-arm_cortex-a53+neon-vfpv4_musl_eabi/linux-*

      - name: 恢复基础系统缓存
        if: github.event.inputs.start_stage == 'ipk'
        uses: actions/cache@main
        with:
          key: ${{ env.VERSION_CACHE_KEY }}-base
          restore-keys: |
            ${{ env.VERSION_CACHE_KEY }}-base-
          path: |
            ${{ env.OPENWRT_PATH }}/build_dir/target-arm_cortex-a53+neon-vfpv4_musl_eabi/root-*
        continue-on-error: true

      - name: 检查基础系统缓存
        if: github.event.inputs.start_stage == 'ipk'
        run: |
          if [ ! -d "$OPENWRT_PATH/build_dir/target-arm_cortex-a53+neon-vfpv4_musl_eabi/root-"* ]; then
            echo "错误：基础系统缓存不存在，无法从${{ github.event.inputs.start_stage }}阶段开始编译"
            exit 1
          fi

      - name: 编译基础系统
        if: github.event.inputs.start_stage == 'toolchain' || github.event.inputs.start_stage == 'packages' || github.event.inputs.start_stage == 'kernel' || github.event.inputs.start_stage == 'base' || github.event.inputs.start_stage == 'full'
        run: |
          cd $OPENWRT_PATH
          echo "开始编译基础系统..."
          make target/linux/install -j$(nproc) || make target/linux/install -j1 V=s
          make package/install -j$(nproc) || make package/install -j1 V=s
          echo "基础系统编译完成"

      - name: 缓存基础系统
        if: github.event.inputs.start_stage == 'toolchain' || github.event.inputs.start_stage == 'packages' || github.event.inputs.start_stage == 'kernel' || github.event.inputs.start_stage == 'base' || github.event.inputs.start_stage == 'full'
        uses: actions/cache@main
        with:
          key: ${{ env.VERSION_CACHE_KEY }}-base ${{ env.CACHE_DATE }}
          restore-keys: |
            ${{ env.VERSION_CACHE_KEY }}-base-
          path: |
            ${{ env.OPENWRT_PATH }}/build_dir/target-arm_cortex-a53+neon-vfpv4_musl_eabi/root-*

      - name: 编译软件包并生成固件
        if: github.event.inputs.start_stage == 'toolchain' || github.event.inputs.start_stage == 'packages' || github.event.inputs.start_stage == 'kernel' || github.event.inputs.start_stage == 'base' || github.event.inputs.start_stage == 'ipk' || github.event.inputs.start_stage == 'full'
        id: compile
        run: |
          cd $OPENWRT_PATH
          echo "开始编译软件包并生成固件..."
          make package/compile -j$(nproc) || make package/compile -j1 V=s
          make package/install -j$(nproc) || make package/install -j1 V=s
          make image -j$(nproc) || make image -j1 V=s
          echo "status=success" >> $GITHUB_OUTPUT
          echo "DATE=$(date +"%Y-%m-%d %H:%M:%S")" >> $GITHUB_ENV
          echo "FILE_DATE=$(date +"%Y.%m.%d")" >> $GITHUB_ENV

      - name: 检查空间使用情况
        if: (!cancelled())
        run: df -hT

      - name: 整理文件
        if: steps.compile.outputs.status == 'success'
        run: |
          # 创建临时目录
          mkdir -p $GITHUB_WORKSPACE/artifacts
          
          # 进入固件目录
          cd $OPENWRT_PATH/bin/targets/*/*
          
          # 复制并重命名配置文件
          cp $OPENWRT_PATH/.config $GITHUB_WORKSPACE/artifacts/${{ matrix.branch_name }}-${{ env.CHIP_TYPE }}-${{ matrix.pkg_name }}.config
          mv config.buildinfo $GITHUB_WORKSPACE/artifacts/${{ matrix.branch_name }}-${{ env.CHIP_TYPE }}-${{ matrix.pkg_name }}.config.buildinfo
          mv *.manifest $GITHUB_WORKSPACE/artifacts/${{ matrix.branch_name }}-${{ env.CHIP_TYPE }}-${{ matrix.pkg_name }}.manifest
          
          # 重命名固件文件
          for file in *.bin; do
            if [[ $file == *"factory"* ]]; then
              new_file="${{ matrix.branch_name }}-${{ env.CHIP_TYPE }}-$(echo $file | sed -n 's/.*-\(jdcloud_.*\)-squashfs-factory.bin/\1/p')-factory-${{ matrix.pkg_name }}.bin"
            elif [[ $file == *"sysupgrade"* ]]; then
              new_file="${{ matrix.branch_name }}-${{ env.CHIP_TYPE }}-$(echo $file | sed -n 's/.*-\(jdcloud_.*\)-squashfs-sysupgrade.bin/\1/p')-sysupgrade-${{ matrix.pkg_name }}.bin"
            else
              new_file="${{ matrix.branch_name }}-${{ env.CHIP_TYPE }}-$(echo $file | sed -n 's/.*-\(jdcloud_.*\)\.bin/\1/p')-${{ matrix.pkg_name }}.bin"
            fi
            mv "$file" "$GITHUB_WORKSPACE/artifacts/$new_file"
          done
          
          # 复制软件包
          mkdir -p $GITHUB_WORKSPACE/artifacts/packages
          mv -f $OPENWRT_PATH/bin/packages/*/*/*.apk $GITHUB_WORKSPACE/artifacts/packages/ 2>/dev/null || true
          mv -f $OPENWRT_PATH/bin/packages/*/*/*.ipk $GITHUB_WORKSPACE/artifacts/packages/ 2>/dev/null || true
          
          # 复制编译日志
          mkdir -p $GITHUB_WORKSPACE/artifacts/logs
          cp $OPENWRT_PATH/logs/* $GITHUB_WORKSPACE/artifacts/logs/ 2>/dev/null || true
          
          echo "ARTIFACTS_PATH=$GITHUB_WORKSPACE/artifacts" >> $GITHUB_ENV

      - name: 上传构建产物
        if: steps.compile.outputs.status == 'success'
        uses: actions/upload-artifact@main
        with:
          name: ${{ matrix.branch_name }}-${{ matrix.pkg_name }}-${{ env.FILE_DATE }}
          path: ${{ env.ARTIFACTS_PATH }}
          retention-days: 7

      - name: 删除旧缓存
        if: always()
        run: |
          # 删除芯片级别的旧缓存
          gh cache list --key ${{ env.CHIP_CACHE_KEY }}- --json key --jq '.[] | .key' | while read -r key; do
            gh cache delete "$key"
          done
          # 删除分支级别的旧缓存
          gh cache list --key ${{ env.BRANCH_CACHE_KEY }}- --json key --jq '.[] | .key' | while read -r key; do
            gh cache delete "$key"
          done
          # 删除版本级别的旧缓存
          gh cache list --key ${{ env.VERSION_CACHE_KEY }}- --json key --jq '.[] | .key' | while read -r key; do
            gh cache delete "$key"
          done
          # 输出缓存状态
          echo "========cache status========"
          echo "ccache: $(du -sh $OPENWRT_PATH/.ccache | cut -f 1)"
          echo "staging: $(du -sh $OPENWRT_PATH/staging_dir | cut -f 1)"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
