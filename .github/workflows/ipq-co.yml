name: 分布式/分层/增量式 OpenWrt 构建优化

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:

env:
  TZ: Asia/Shanghai
  OPENWRT_ROOT: openwrt
  FEEDS_CONF: feeds.conf.default
  CCACHE_DIR: ${{ github.workspace }}/.ccache

jobs:
  # 预处理任务：环境准备与全局缓存
  prepare:
    runs-on: ubuntu-latest
    outputs:
      cache-key-dl: ${{ steps.cache-dl.outputs.cache-hit }}
      cache-key-ccache: ${{ steps.cache-ccache.outputs.cache-hit }}
    steps:
      - name: 拉取代码
        uses: actions/checkout@v4

      - name: 缓存 OpenWrt dl 源码下载目录，加速依赖拉取
        id: cache-dl
        uses: actions/cache@v4
        with:
          path: ${{ env.OPENWRT_ROOT }}/dl
          key: dl-${{ runner.os }}-${{ hashFiles('**/feeds.conf.default') }}

      - name: 缓存 ccache，加速后续编译
        id: cache-ccache
        uses: actions/cache@v4
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ccache-${{ runner.os }}-${{ github.sha }}

      - name: 安装编译依赖（兼容 Ubuntu 24.04+，解决 python3-distutils 已废弃问题）
        run: |
          set -e
          export DEBIAN_FRONTEND=noninteractive

          # 检查系统版本，针对 noble 及更高版本替换 python3-distutils
          . /etc/os-release
          echo "当前系统版本: $VERSION_CODENAME"
          if [[ "$VERSION_CODENAME" == "noble" || "$VERSION_CODENAME" == "or higher" ]]; then
            sudo apt-get update -y || { echo "apt-get update 失败" >&2; exit 101; }
            sudo apt-get install -y build-essential clang flex bison g++ gawk gcc-multilib gettext git libncurses5-dev libssl-dev python3 python3-pip rsync unzip zlib1g-dev ccache python3-setuptools || { echo "依赖安装失败(noble/python3-distutils已被移除)。如需 distutils，建议 pip install setuptools 或 python3 -m ensurepip --upgrade。" >&2; exit 102; }
            python3 -m pip install --upgrade pip || { echo "pip 升级失败" >&2; exit 103; }
            python3 -m pip install distutils || true
          else
            sudo apt-get update -y || { echo "apt-get update 失败" >&2; exit 104; }
            sudo apt-get install -y build-essential clang flex bison g++ gawk gcc-multilib gettext git libncurses5-dev libssl-dev python3-distutils python3-setuptools python3-pip rsync unzip zlib1g-dev ccache || { echo "依赖安装失败" >&2; exit 105; }
          fi

  # 分层并行构建 (Ultra/Max/Pro 配置，支持多设备/芯片矩阵)
  build:
    needs: prepare
    strategy:
      matrix:
        config_type: [Ultra, Max, Pro]
        device: [jdcloud_re-ss-01, jdcloud_re-cs-02]
        chip: [ipq807x] # 可扩展芯片类型
    runs-on: ubuntu-latest
    env:
      CONFIG_TYPE: ${{ matrix.config_type }}
      DEVICE: ${{ matrix.device }}
      CHIP: ${{ matrix.chip }}
      REPO_SHORT: immwrt
    steps:
      - name: 拉取代码
        uses: actions/checkout@v4

      - name: 恢复 dl 缓存
        uses: actions/cache@v4
        with:
          path: ${{ env.OPENWRT_ROOT }}/dl
          key: dl-${{ runner.os }}-${{ hashFiles('**/feeds.conf.default') }}

      - name: 恢复 ccache
        uses: actions/cache@v4
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ccache-${{ runner.os }}-${{ github.sha }}

      - name: 合并配置文件（优先级：软件包 > 分支 > 芯片）
        run: |
          set -e
          for file in configs/${{ env.CHIP }}_base.config configs/${{ env.REPO_SHORT }}_base.config configs/${{ env.CONFIG_TYPE }}.config; do
            [ -f "$file" ] || { echo "缺失配置文件: $file" >&2; exit 201; }
          done
          cat configs/${{ env.CHIP }}_base.config configs/${{ env.REPO_SHORT }}_base.config configs/${{ env.CONFIG_TYPE }}.config > ${{ env.OPENWRT_ROOT }}/.config

      - name: 管理 feeds，并安装所有软件包
        run: |
          set -e
          cd ${{ env.OPENWRT_ROOT }}
          # feeds.conf 优先按芯片提供，缺失时用默认
          if [ -f ../feeds.conf.${{ env.CHIP }} ]; then
            cp ../feeds.conf.${{ env.CHIP }} ${{ env.FEEDS_CONF }}
          else
            cp ../feeds.conf.default ${{ env.FEEDS_CONF }}
          fi
          ./scripts/feeds update -a || { echo "feeds update 失败" >&2; exit 202; }
          ./scripts/feeds install -a || { echo "feeds install 失败" >&2; exit 203; }

      - name: 拉取/替换指定第三方包
        run: |
          set -e
          cd ${{ env.OPENWRT_ROOT }}/package
          git clone --depth 1 https://github.com/sbwml/luci-app-openlist2 openlist || echo "luci-app-openlist2 拉取失败"
          git clone --depth 1 https://github.com/gdy666/luci-app-lucky luci-app-lucky || echo "luci-app-lucky 拉取失败"
          # 可继续添加其它包
          cd ../

      - name: 执行固件编译
        run: |
          set -e
          cd ${{ env.OPENWRT_ROOT }}
          make defconfig || { echo "make defconfig 失败" >&2; exit 204; }
          make -j$(nproc) V=s CCACHE_DIR=${{ env.CCACHE_DIR }} || { echo "固件编译失败，请检查 logs" >&2; exit 205; }

      - name: 归档固件与配置日志
        run: |
          set -e
          ARTIFACTS_DIR=$GITHUB_WORKSPACE/artifacts/${{ env.CHIP }}-${{ env.CONFIG_TYPE }}-${{ env.DEVICE }}
          mkdir -p "$ARTIFACTS_DIR"
          cp ${{ env.OPENWRT_ROOT }}/bin/targets/qualcommax/${{ env.CHIP }}/*.bin "$ARTIFACTS_DIR/" 2>/dev/null || echo "无固件文件"
          cp ${{ env.OPENWRT_ROOT }}/.config "$ARTIFACTS_DIR/config-${{ env.CONFIG_TYPE }}.txt" || echo "无配置文件"
          cp ${{ env.OPENWRT_ROOT }}/build.log "$ARTIFACTS_DIR/build.log" 2>/dev/null || echo "无 build.log"

      - name: 上传构建产物
        uses: actions/upload-artifact@v4
        with:
          name: firmware-${{ env.CHIP }}-${{ env.CONFIG_TYPE }}-${{ env.DEVICE }}
          path: artifacts/${{ env.CHIP }}-${{ env.CONFIG_TYPE }}-${{ env.DEVICE }}/

  # 汇总产物并生成发布说明
  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: 下载所有构建产物
        uses: actions/download-artifact@v4
        with:
          path: all-artifacts

      - name: 生成发布说明
        run: |
          set -e
          echo "# 自动生成发布说明" > release-notes.md
          for d in all-artifacts/*; do
            [ -d "$d" ] || continue
            echo "## $(basename $d)" >> release-notes.md
            ls -lh "$d" >> release-notes.md
            echo >> release-notes.md
          done

      - name: 上传发布说明
        uses: actions/upload-artifact@v4
        with:
          name: release-notes
          path: release-notes.md
