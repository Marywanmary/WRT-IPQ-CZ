name: 分布式/分层/增量式 OpenWrt 构建（ipq60xx）

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:

env:
  TZ: Asia/Shanghai
  OPENWRT_ROOT: openwrt
  FEEDS_CONF: feeds.conf.default
  CCACHE_DIR: ${{ github.workspace }}/.ccache

jobs:
  # 1. 预处理：环境准备与缓存
  prepare:
    runs-on: ubuntu-latest
    steps:
      - name: 拉取代码
        uses: actions/checkout@v4

      - name: 缓存 OpenWrt dl 目录，加速依赖拉取
        id: cache-dl
        uses: actions/cache@v4
        with:
          path: ${{ env.OPENWRT_ROOT }}/dl
          key: dl-${{ runner.os }}-${{ hashFiles('**/feeds.conf.default') }}

      - name: 缓存 ccache，加速编译
        id: cache-ccache
        uses: actions/cache@v4
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ccache-${{ runner.os }}-${{ github.sha }}

      - name: 安装编译依赖（兼容 Ubuntu 24.04+）
        run: |
          set -e
          export DEBIAN_FRONTEND=noninteractive
          . /etc/os-release
          echo "当前系统版本: $VERSION_CODENAME"
          if [[ "$VERSION_CODENAME" == "noble" || "$VERSION_CODENAME" == "or higher" ]]; then
            sudo apt-get update -y || { echo "apt-get update 失败" >&2; exit 101; }
            sudo apt-get install -y build-essential clang flex bison g++ gawk gcc-multilib gettext git libncurses5-dev libssl-dev python3 python3-pip rsync unzip zlib1g-dev ccache python3-setuptools || { echo "依赖安装失败(noble/python3-distutils已被移除)。如需 distutils，建议 pip install setuptools 或 python3 -m ensurepip --upgrade。" >&2; exit 102; }
            python3 -m pip install --upgrade pip || { echo "pip 升级失败" >&2; exit 103; }
            python3 -m pip install distutils || true
          else
            sudo apt-get update -y || { echo "apt-get update 失败" >&2; exit 104; }
            sudo apt-get install -y build-essential clang flex bison g++ gawk gcc-multilib gettext git libncurses5-dev libssl-dev python3-distutils python3-setuptools python3-pip rsync unzip zlib1g-dev ccache || { echo "依赖安装失败" >&2; exit 105; }
          fi

  # 2. 分层并行构建 (Ultra/Max/Pro 配置，支持多分支/多设备)
  build:
    needs: prepare
    strategy:
      matrix:
        config_type: [Ultra, Max, Pro]        # 软件包配置名
        branch_base: [op, imm, lib]           # 分支基础配置前缀
        device: [jdcloud_re-ss-01, jdcloud_re-cs-02]
    runs-on: ubuntu-latest
    env:
      CHIP: ipq60xx
      CONFIG_TYPE: ${{ matrix.config_type }}
      BRANCH_BASE: ${{ matrix.branch_base }}
      DEVICE: ${{ matrix.device }}
    steps:
      - name: 拉取代码
        uses: actions/checkout@v4

      - name: 恢复 dl 缓存
        uses: actions/cache@v4
        with:
          path: ${{ env.OPENWRT_ROOT }}/dl
          key: dl-${{ runner.os }}-${{ hashFiles('**/feeds.conf.default') }}

      - name: 恢复 ccache
        uses: actions/cache@v4
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ccache-${{ runner.os }}-${{ github.sha }}

      - name: 创建 openwrt 目录（如不存在）
        run: mkdir -p ${{ env.OPENWRT_ROOT }}

      - name: 合并配置文件（芯片基础 > 分支基础 > 软件包配置）
        run: |
          set -e
          CHIP_CFG=configs/${CHIP}_base.config
          BRANCH_CFG=configs/${BRANCH_BASE}_base.config
          PKG_CFG=configs/${CONFIG_TYPE}.config
          for cfg in "$CHIP_CFG" "$BRANCH_CFG" "$PKG_CFG"; do
            if [ ! -f "$cfg" ]; then
              echo "缺失配置文件: $cfg" >&2
              ls -l configs/
              exit 201
            fi
          done
          cat "$CHIP_CFG" "$BRANCH_CFG" "$PKG_CFG" > ${{ env.OPENWRT_ROOT }}/.config
          echo "合并配置文件顺序: $CHIP_CFG -> $BRANCH_CFG -> $PKG_CFG"

      - name: 拷贝 feeds.conf.default 到 openwrt 目录
        run: |
          set -e
          # 优先根目录查找 feeds.conf.default
          if [ -f feeds.conf.default ]; then
            cp feeds.conf.default ${{ env.OPENWRT_ROOT }}/feeds.conf.default
          else
            echo "仓库根目录缺少 feeds.conf.default 文件，请在仓库根目录添加！" >&2
            ls -l
            exit 210
          fi

      - name: 管理 feeds 并安装所有包
        run: |
          set -e
          cd ${{ env.OPENWRT_ROOT }}
          ./scripts/feeds update -a || { echo "feeds update 失败" >&2; exit 202; }
          ./scripts/feeds install -a || { echo "feeds install 失败" >&2; exit 203; }

      - name: 拉取/替换指定第三方包
        run: |
          set -e
          cd ${{ env.OPENWRT_ROOT }}/package || exit 0  # 如果目录不存在则跳过
          git clone --depth 1 https://github.com/sbwml/luci-app-openlist2 openlist || echo "luci-app-openlist2 拉取失败"
          git clone --depth 1 https://github.com/gdy666/luci-app-lucky luci-app-lucky || echo "luci-app-lucky 拉取失败"
          cd ../

      - name: 编译固件
        run: |
          set -e
          cd ${{ env.OPENWRT_ROOT }}
          make defconfig || { echo "make defconfig 失败" >&2; exit 204; }
          make -j$(nproc) V=s CCACHE_DIR=${{ env.CCACHE_DIR }} || { echo "固件编译失败，请检查 logs" >&2; exit 205; }

      - name: 归档固件与配置日志
        run: |
          set -e
          ARTIFACTS_DIR=$GITHUB_WORKSPACE/artifacts/${{ env.CHIP }}-${{ env.BRANCH_BASE }}-${{ env.CONFIG_TYPE }}-${{ env.DEVICE }}
          mkdir -p "$ARTIFACTS_DIR"
          cp ${{ env.OPENWRT_ROOT }}/bin/targets/qualcommax/${{ env.CHIP }}/*.bin "$ARTIFACTS_DIR/" 2>/dev/null || echo "无固件文件"
          cp ${{ env.OPENWRT_ROOT }}/.config "$ARTIFACTS_DIR/config-${{ env.CONFIG_TYPE }}.txt" || echo "无配置文件"
          cp ${{ env.OPENWRT_ROOT }}/build.log "$ARTIFACTS_DIR/build.log" 2>/dev/null || echo "无 build.log"

      - name: 上传构建产物
        uses: actions/upload-artifact@v4
        with:
          name: firmware-${{ env.CHIP }}-${{ env.BRANCH_BASE }}-${{ env.CONFIG_TYPE }}-${{ env.DEVICE }}
          path: artifacts/${{ env.CHIP }}-${{ env.BRANCH_BASE }}-${{ env.CONFIG_TYPE }}-${{ env.DEVICE }}/

  # 3. 汇总产物并生成发布说明
  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: 下载所有构建产物
        uses: actions/download-artifact@v4
        with:
          path: all-artifacts

      - name: 生成发布说明
        run: |
          set -e
          echo "# 自动生成发布说明" > release-notes.md
          for d in all-artifacts/*; do
            [ -d "$d" ] || continue
            echo "## $(basename $d)" >> release-notes.md
            ls -lh "$d" >> release-notes.md
            echo >> release-notes.md
          done

      - name: 上传发布说明
        uses: actions/upload-artifact@v4
        with:
          name: release-notes
          path: release-notes.md
