name: 分布式/分层/增量式 OpenWrt 构建（ipq60xx）

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:

env:
  TZ: Asia/Shanghai
  OPENWRT_ROOT: openwrt
  FEEDS_CONF: feeds.conf.default
  CCACHE_DIR: ${{ github.workspace }}/.ccache

jobs:
  prepare:
    runs-on: ubuntu-latest
    steps:
      - name: 拉取代码
        uses: actions/checkout@v4

      - name: 检查 feeds.conf.default
        run: |
          set -e
          if [ ! -f feeds.conf.default ]; then
            echo "仓库根目录缺少 feeds.conf.default 文件！" >&2
            ls -l
            exit 210
          fi

      - name: 缓存 OpenWrt dl
        id: cache-dl
        uses: actions/cache@v4
        with:
          path: ${{ env.OPENWRT_ROOT }}/dl
          key: dl-${{ runner.os }}-${{ hashFiles('**/feeds.conf.default') }}

      - name: 缓存 ccache
        id: cache-ccache
        uses: actions/cache@v4
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ccache-${{ runner.os }}-${{ github.sha }}

      - name: 安装依赖（兼容 Ubuntu 24.04+）
        run: |
          set -e
          export DEBIAN_FRONTEND=noninteractive
          . /etc/os-release
          if [[ "$VERSION_CODENAME" == "noble" || "$VERSION_CODENAME" == "or higher" ]]; then
            sudo apt-get update -y
            sudo apt-get install -y build-essential clang flex bison g++ gawk gcc-multilib gettext git libncurses5-dev libssl-dev python3 python3-pip rsync unzip zlib1g-dev ccache python3-setuptools
            python3 -m pip install --upgrade pip
            python3 -m pip install distutils || true
          else
            sudo apt-get update -y
            sudo apt-get install -y build-essential clang flex bison g++ gawk gcc-multilib gettext git libncurses5-dev libssl-dev python3-distutils python3-setuptools python3-pip rsync unzip zlib1g-dev ccache
          fi

  build:
    needs: prepare
    strategy:
      max-parallel: 6  # 并发最大6
      matrix:
        config_type: [Ultra, Max, Pro]
        branch_base: [op, imm, lib]
        device: [jdcloud_re-ss-01, jdcloud_re-cs-02]
    runs-on: ubuntu-latest
    env:
      CHIP: ipq60xx
      CONFIG_TYPE: ${{ matrix.config_type }}
      BRANCH_BASE: ${{ matrix.branch_base }}
      DEVICE: ${{ matrix.device }}
    steps:
      - name: 拉取代码
        uses: actions/checkout@v4

      - name: 检查 feeds.conf.default
        run: |
          set -e
          if [ ! -f feeds.conf.default ]; then
            echo "仓库根目录缺少 feeds.conf.default 文件！" >&2
            ls -l
            exit 210
          fi

      - name: 恢复 dl 缓存
        uses: actions/cache@v4
        with:
          path: ${{ env.OPENWRT_ROOT }}/dl
          key: dl-${{ runner.os }}-${{ hashFiles('**/feeds.conf.default') }}

      - name: 恢复 ccache
        uses: actions/cache@v4
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ccache-${{ runner.os }}-${{ github.sha }}

      - name: 自动 clone OpenWrt 源码到 openwrt/（如不存在）
        run: |
          set -e
          if [ ! -d ${{ env.OPENWRT_ROOT }}/scripts ] || [ ! -f ${{ env.OPENWRT_ROOT }}/scripts/feeds ]; then
            echo "openwrt/scripts/feeds 不存在，自动 clone OpenWrt 官方源码！"
            rm -rf ${{ env.OPENWRT_ROOT }}
            git clone --depth=1 https://github.com/openwrt/openwrt.git ${{ env.OPENWRT_ROOT }}
          else
            echo "openwrt/scripts/feeds 已存在，跳过 clone"
          fi

      - name: 合并配置文件（芯片基础 > 分支基础 > 软件包配置）
        run: |
          set -e
          CHIP_CFG=configs/${CHIP}_base.config
          BRANCH_CFG=configs/${BRANCH_BASE}_base.config
          PKG_CFG=configs/${CONFIG_TYPE}.config
          for cfg in "$CHIP_CFG" "$BRANCH_CFG" "$PKG_CFG"; do
            if [ ! -f "$cfg" ]; then
              echo "缺失配置文件: $cfg" >&2
              ls -l configs/
              exit 201
            fi
          done
          cat "$CHIP_CFG" "$BRANCH_CFG" "$PKG_CFG" > ${{ env.OPENWRT_ROOT }}/.config

      - name: 拷贝 feeds.conf.default 到 openwrt 目录
        run: cp feeds.conf.default ${{ env.OPENWRT_ROOT }}/feeds.conf.default

      - name: 拉取/替换第三方包
        run: |
          set -e
          cd ${{ env.OPENWRT_ROOT }}/package || exit 0
          git clone --depth 1 https://github.com/sbwml/luci-app-openlist2 openlist || true
          git clone --depth 1 https://github.com/gdy666/luci-app-lucky luci-app-lucky || true
          cd ../

      - name: 更新/安装 feeds
        run: |
          set -e
          cd ${{ env.OPENWRT_ROOT }}
          ./scripts/feeds update -a
          ./scripts/feeds install -a

      - name: 编译固件
        run: |
          set -e
          cd ${{ env.OPENWRT_ROOT }}
          make defconfig
          make -j$(nproc) V=s CCACHE_DIR=${{ env.CCACHE_DIR }}

      - name: 检查并归档固件与配置日志
        run: |
          set -e
          ARTIFACTS_DIR=$GITHUB_WORKSPACE/artifacts/${{ env.CHIP }}-${{ env.BRANCH_BASE }}-${{ env.CONFIG_TYPE }}-${{ env.DEVICE }}
          mkdir -p "$ARTIFACTS_DIR"
          BIN_PATH="${{ env.OPENWRT_ROOT }}/bin/targets"
          BIN_FOUND=0
          for bin_file in $(find "$BIN_PATH" -name "*.bin" 2>/dev/null); do
            cp "$bin_file" "$ARTIFACTS_DIR/"
            BIN_FOUND=1
          done
          if [ "$BIN_FOUND" -eq 0 ]; then
            echo "警告：未发现任何固件 bin 文件，编译可能未成功！" >&2
            ls -R $BIN_PATH
            exit 220
          fi
          cp ${{ env.OPENWRT_ROOT }}/.config "$ARTIFACTS_DIR/config-${{ env.CONFIG_TYPE }}.txt" || true
          cp ${{ env.OPENWRT_ROOT }}/build.log "$ARTIFACTS_DIR/build.log" 2>/dev/null || true

      - name: 上传构建产物
        uses: actions/upload-artifact@v4
        with:
          name: firmware-${{ env.CHIP }}-${{ env.BRANCH_BASE }}-${{ env.CONFIG_TYPE }}-${{ env.DEVICE }}
          path: artifacts/${{ env.CHIP }}-${{ env.BRANCH_BASE }}-${{ env.CONFIG_TYPE }}-${{ env.DEVICE }}/

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: 下载所有构建产物
        uses: actions/download-artifact@v4
        with:
          path: all-artifacts

      - name: 生成发布说明
        run: |
          set -e
          echo "# 自动生成发布说明" > release-notes.md
          for d in all-artifacts/*; do
            [ -d "$d" ] || continue
            echo "## $(basename $d)" >> release-notes.md
            ls -lh "$d" >> release-notes.md
            echo >> release-notes.md
          done

      - name: 自动发布 Release
        uses: softprops/action-gh-release@v1
        with:
          name: "OpenWrt 固件自动发布 ${{ github.run_number }}"
          tag_name: "auto-release-${{ github.run_number }}"
          body_path: release-notes.md
          files: all-artifacts/*/*.bin
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 上传发布说明
        uses: actions/upload-artifact@v4
        with:
          name: release-notes
          path: release-notes.md
