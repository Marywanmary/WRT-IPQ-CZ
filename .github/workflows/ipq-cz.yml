name: OpenWrt固件编译

on:
  # 北京时间周五0点（UTC+8），转换为UTC时间是周四16点
  schedule:
    - cron: '0 16 * * 4'
  workflow_dispatch:
    inputs:
      arch:
        description: '芯片架构'
        required: true
        default: 'ipq60xx'
        type: choice
        options:
        - ipq60xx
        - ipq80xx
        - mtk

env:
  # 分支信息配置
  BRANCHES: '[
    {"name": "immortalwrt", "url": "https://github.com/laipeng668/immortalwrt.git", "branch": "master", "short": "immwrt"},
    {"name": "openwrt", "url": "https://github.com/laipeng668/openwrt.git", "branch": "master", "short": "openwrt"},
    {"name": "libwrt", "url": "https://github.com/laipeng668/openwrt-6.x.git", "branch": "k6.12-nss", "short": "libwrt"}
  ]'
  # 配置列表，按照优先级排序（Ultra > Max > Pro）
  CONFIGS: '["Ultra", "Max", "Pro"]'
  # Docker镜像
  DOCKER_IMAGE: ubuntu:22.04

jobs:
  # 准备阶段：设置环境和缓存
  prepare:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
      date-tag: ${{ steps.set-date.outputs.date-tag }}
    steps:
      - name: 设置日期标签
        id: set-date
        run: echo "date-tag=$(date +'%Y-%m-%d')-${{ github.event.inputs.arch || 'ipq60xx' }}" >> $GITHUB_OUTPUT
      
      - name: 设置编译矩阵
        id: set-matrix
        run: |
          matrix=$(echo '${{ env.BRANCHES }}' | jq -c '.[] | {branch: .name, url: .url, branch_name: .branch, short: .short}')
          echo "matrix=$matrix" >> $GITHUB_OUTPUT

  # 编译阶段：并行编译各分支和配置
  build:
    needs: prepare
    runs-on: ubuntu-latest
    strategy:
      matrix:
        branch: ${{ fromJson(needs.prepare.outputs.matrix) }}
      max-parallel: 3  # 分支级并行
    container:
      image: ${{ env.DOCKER_IMAGE }}
    steps:
      - name: 初始磁盘清理
        run: |
          sudo rm -rf /usr/share/dotnet /usr/local/lib/android /opt/ghc
          sudo docker system prune -af
          df -h

      - name: 安装必要软件
        run: |
          apt-get update
          apt-get install -y build-essential clang flex bison g++ gawk \
            gcc-multilib g++-multilib gettext git libncurses5-dev \
            libssl-dev python3-distutils rsync unzip zlib1g-dev \
            file wget sudo ccache python3 python3-pip jq
          pip3 install pyelftools

      - name: 检出代码
        uses: actions/checkout@v4
        with:
          path: 'openwrt-build'

      - name: 设置缓存
        uses: actions/cache@v3
        with:
          path: /tmp/ccache
          key: ${{ runner.os }}-ccache-${{ matrix.branch.short }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-ccache-${{ matrix.branch.short }}-
            ${{ runner.os }}-ccache-

      - name: 设置编译环境
        run: |
          mkdir -p /tmp/build
          cd /tmp/build
          git clone --depth 1 --branch ${{ matrix.branch.branch_name }} ${{ matrix.branch.url }} openwrt
          cd openwrt
          cp -r $GITHUB_WORKSPACE/openwrt-build/* .
          
          # 设置ccache
          export CCACHE_DIR=/tmp/ccache
          ccache -M 20G
          ccache -s

      - name: 执行编译脚本
        working-directory: /tmp/build/openwrt
        run: |
          # 设置环境变量
          export ARCH="${{ github.event.inputs.arch || 'ipq60xx' }}"
          export BRANCH="${{ matrix.branch.name }}"
          export BRANCH_SHORT="${{ matrix.branch.short }}"
          export WORKSPACE="$GITHUB_WORKSPACE"
          
          # 执行编译脚本
          chmod +x $GITHUB_WORKSPACE/openwrt-build/scripts/scripts-cz.sh
          chmod +x $GITHUB_WORKSPACE/openwrt-build/scripts/build-cz.sh
          
          # 执行分支准备脚本
          $GITHUB_WORKSPACE/openwrt-build/scripts/scripts-cz.sh
          
          # 编译各配置
          configs=(${{ env.CONFIGS }})
          for config in "${configs[@]}"; do
            echo "编译配置: $config"
            $GITHUB_WORKSPACE/openwrt-build/scripts/build-cz.sh "$config"
          done

      - name: 收集编译产物
        run: |
          mkdir -p $GITHUB_WORKSPACE/artifacts
          cd /tmp/build
          
          # 收集固件
          if [ -d "openwrt/bin/targets" ]; then
            cp -r openwrt/bin/targets $GITHUB_WORKSPACE/artifacts/
          fi
          
          # 收集配置文件
          if [ -d "openwrt/.config" ]; then
            cp openwrt/.config $GITHUB_WORKSPACE/artifacts/
          fi
          
          # 收集日志
          if [ -f "openwrt/build.log" ]; then
            cp openwrt/build.log $GITHUB_WORKSPACE/artifacts/
          fi

      - name: 上传编译产物
        uses: actions/upload-artifact@v3
        with:
          name: build-${{ matrix.branch.short }}-${{ github.event.inputs.arch || 'ipq60xx' }}
          path: artifacts/
          retention-days: 7

  # 整理阶段：合并所有编译产物
  package:
    needs: [prepare, build]
    runs-on: ubuntu-latest
    steps:
      - name: 下载所有编译产物
        uses: actions/download-artifact@v3
        with:
          path: artifacts/

      - name: 整理产物
        run: |
          mkdir -p release
          ARCH="${{ github.event.inputs.arch || 'ipq60xx' }}"
          DATE_TAG="${{ needs.prepare.outputs.date-tag }}"
          
          # 整理固件
          for branch_dir in artifacts/build-*/; do
            if [ -d "$branch_dir/targets" ]; then
              # 提取分支缩写
              branch_short=$(basename "$branch_dir" | cut -d'-' -f2)
              
              # 处理每个固件文件
              find "$branch_dir/targets" -name "*.bin" -type f | while read firmware; do
                # 从文件名提取设备名称和固件类型
                filename=$(basename "$firmware")
                device_name=$(echo "$filename" | sed -n 's/.*-\(jdcloud_re-[cs][sp]-[0-9][0-9]\)-.*/\1/p')
                firmware_type=$(echo "$filename" | sed -n 's/.*-\(factory\|sysupgrade\)\.bin/\1/p')
                
                # 从文件名提取配置类型
                config_type=$(echo "$filename" | sed -n 's/.*-\(Pro\|Max\|Ultra\)\.bin/\1/p')
                
                # 重命名固件
                if [ -n "$device_name" ] && [ -n "$firmware_type" ] && [ -n "$config_type" ]; then
                  new_filename="${branch_short}-${device_name}-${firmware_type}-${config_type}.bin"
                  cp "$firmware" "release/$new_filename"
                fi
              done
            fi
          done
          
          # 整理配置文件
          mkdir -p release/configs
          for branch_dir in artifacts/build-*/; do
            if [ -f "$branch_dir/.config" ]; then
              branch_short=$(basename "$branch_dir" | cut -d'-' -f2)
              
              # 从配置文件中提取设备名称
              device_name=$(grep "CONFIG_TARGET_DEVICE_.*=y" "$branch_dir/.config" | head -1 | sed 's/CONFIG_TARGET_DEVICE_.*_DEVICE_\(.*\)=y/\1/')
              
              # 处理每种配置
              for config in Ultra Max Pro; do
                if [ -f "$branch_dir/.config.$config" ]; then
                  cp "$branch_dir/.config.$config" "release/configs/${branch_short}-${ARCH}-${device_name}-${config}.config"
                  cp "$branch_dir/.config.$config.buildinfo" "release/configs/${branch_short}-${ARCH}-${device_name}-${config}.config.buildinfo"
                  cp "$branch_dir/.config.$config.manifest" "release/configs/${branch_short}-${ARCH}-${device_name}-${config}.manifest" 2>/dev/null || true
                fi
              done
            fi
          done
          
          # 打包配置文件
          cd release/configs
          tar -czf "../${ARCH}-config.tar.gz" .
          cd - >/dev/null
          
          # 整理日志文件
          mkdir -p release/logs
          for branch_dir in artifacts/build-*/; do
            if [ -f "$branch_dir/build.log" ]; then
              branch_short=$(basename "$branch_dir" | cut -d'-' -f2)
              cp "$branch_dir/build.log" "release/logs/${branch_short}-build.log"
              
              # 提取错误和警告日志
              grep -i "error\|warning" "$branch_dir/build.log" > "release/logs/${branch_short}-errors-warnings.log" || true
            fi
          done
          
          # 打包日志文件
          cd release/logs
          tar -czf "../${ARCH}-log.tar.gz" .
          cd - >/dev/null
          
          # 整理软件包
          mkdir -p release/packages
          for branch_dir in artifacts/build-*/; do
            if [ -d "$branch_dir/packages" ]; then
              cp -r "$branch_dir/packages/"* release/packages/ 2>/dev/null || true
            fi
          done
          
          # 打包软件包
          cd release/packages
          tar -czf "../${ARCH}-app.tar.gz" .
          cd - >/dev/null

      - name: 创建发布说明
        run: |
          ARCH="${{ github.event.inputs.arch || 'ipq60xx' }}"
          DATE_TAG="${{ needs.prepare.outputs.date-tag }}"
          
          # 创建发布说明文件
          cat > release/NOTES.md << EOF
          ## OpenWrt固件发布
          
          **默认管理地址**: 192.168.111.1  
          **默认用户**: root  
          **默认密码**: none  
          **默认WIFI密码**: 12345678  
          
          **固件包括**: $ARCH 的京东云亚瑟、雅典娜  
          
          **作者**: Mary  
          **发布时间**: $(date +'%Y-%m-%d %H:%M:%S')  
          
          ### 编译的luci-app列表:
          $(ls release/packages/ 2>/dev/null | grep -E 'luci-app-.*' | sort | sed 's/^/- /' || echo "无软件包信息")
          
          ### 文件说明:
          - 固件文件: 命名规则为 [分支缩写]-[设备名称]-[固件类型]-[配置类型].bin
          - ${ARCH}-config.tar.gz: 包含所有配置文件
          - ${ARCH}-log.tar.gz: 包含编译日志
          - ${ARCH}-app.tar.gz: 包含编译的软件包
          EOF

      - name: 上传发布产物
        uses: actions/upload-artifact@v3
        with:
          name: release-${{ github.event.inputs.arch || 'ipq60xx' }}
          path: release/
          retention-days: 7

  # 发布阶段：创建GitHub Release
  release:
    needs: [prepare, package]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: 下载发布产物
        uses: actions/download-artifact@v3
        with:
          name: release-${{ github.event.inputs.arch || 'ipq60xx' }}
          path: release/

      - name: 创建GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.prepare.outputs.date-tag }}
          name: OpenWrt固件发布 - ${{ needs.prepare.outputs.date-tag }}
          body_path: release/NOTES.md
          files: |
            release/*.bin
            release/*.tar.gz
          draft: false
          prerelease: false
